service: medicine-shop-saas

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  environment:
    NODE_ENV: production
    DB_HOST: ${ssm:/medicine-shop/${self:provider.stage}/db-host}
    DB_PORT: ${ssm:/medicine-shop/${self:provider.stage}/db-port}
    DB_NAME: ${ssm:/medicine-shop/${self:provider.stage}/db-name}
    DB_USER: ${ssm:/medicine-shop/${self:provider.stage}/db-user}
    DB_PASSWORD: ${ssm:/medicine-shop/${self:provider.stage}/db-password}
    JWT_SECRET: ${ssm:/medicine-shop/${self:provider.stage}/jwt-secret}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - ssm:GetParameter
            - ssm:GetParameters
          Resource: 
            - "arn:aws:ssm:${self:provider.region}:*:parameter/medicine-shop/${self:provider.stage}/*"
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "*"

functions:
  api:
    handler: aws/functions/api.handler
    events:
      - http:
          path: /api/{proxy+}
          method: ANY
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
    timeout: 30
    memorySize: 512

  frontend:
    handler: aws/functions/frontend.handler
    events:
      - http:
          path: /
          method: GET
          cors: true
      - http:
          path: /{proxy+}
          method: ANY
          cors: true
    timeout: 10
    memorySize: 256

plugins:
  - serverless-offline

custom:
  serverless-offline:
    httpPort: 3000
    lambdaPort: 3002 